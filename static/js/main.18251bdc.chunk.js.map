{"version":3,"sources":["Navbar.js","axios.js","Request.js","Banner.js","Rows.js","HomeScreen.js","firebase.js","SignInScreen.js","LoginScreen.js","features/counter/counterAPI.js","features/counter/userSlice.js","ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Wrap1","Navbar","useState","show","handleShow","history","useHistory","transitionNavbar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Contents","Buttons","FadeBottom","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundImage","backdrop_path","title","name","original_title","overview","substr","Rows","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","Homescreen","Wrap","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignInScreen","emailRef","useRef","passRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","Background","Gradient","Body","Input","LoginScreen","signIn","setSignIn","fetchCount","amount","Promise","resolve","setTimeout","createAsyncThunk","response","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","Info","Details","Plans","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18251bdc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport styled from 'styled-components';\r\n\r\nfunction Navbar() {\r\n    const [show, handleShow] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const transitionNavbar = () => {\r\n        if(window.scrollY > 100) {\r\n            handleShow(true);\r\n        }else{\r\n            handleShow(false);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n     window.addEventListener(\"scroll\", transitionNavbar);\r\n     return () => window.removeEventListener(\"scroll\", transitionNavbar);\r\n    },[])\r\n    return (\r\n        <Container className={` nav ${show && 'blak'}`}>\r\n        <Wrap1>\r\n            <img onClick={()=> history.push('/')} className=\"nav_logo\" src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\r\n            <img onClick={()=> history.push('/profile')} className=\"nav_av\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"\" />\r\n        </Wrap1>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n position: fixed;\r\n z-index: 100;\r\n    .nav{\r\n        top:0;\r\n        padding: 15px;\r\n        width: 100%;\r\n        height: 30px;\r\n        \r\n        transition-timing-function: ease-in;\r\n        transition: all 0.5s;\r\n    }\r\n    \r\n.blak{\r\n    background-color: #111;\r\n}\r\n \r\n`\r\n\r\nconst Wrap1 = styled.div`\r\n display: flex;\r\n justify-content: space-between;\r\n .nav_logo{\r\n     position: fixed;\r\n     top: 8px;\r\n     left: 0;\r\n     width: 80px;\r\n     object-fit: contain;\r\n     padding-left: 20px;\r\n     cursor: pointer;\r\n }\r\n .nav_av{\r\n     position: fixed;\r\n     top: 8px;\r\n     right: 20px;\r\n     width: 30px;\r\n     cursor: pointer;\r\n }\r\n`\r\n\r\nexport default Navbar\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;\r\n","const API_KEY = \"e7c95c521af34a861a6933b5c78dbc1a\";\r\n\r\nconst requests = { \r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=enâ€”US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&language=en-US`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=enâ€”US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres.99`, \r\n};\r\n\r\nexport default requests;","import axios from './axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components';\r\nimport requests from './Request';\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n      async function fetchData() {\r\n          const request = await axios.get(requests.fetchActionMovies);\r\n          setMovie(\r\n              request.data.results[\r\n                  Math.floor(Math.random() * request.data.results.length - 1)\r\n              ]\r\n          );\r\n          return request;\r\n      } \r\n      \r\n      fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(string, n){\r\n        return string?.length > n ? string.substr(0, n-1)+\"...\" : string ;\r\n    }\r\n    \r\n    return (\r\n        <Container style={{backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`}}>\r\n            <Contents>\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_title}</h1>\r\n                <Buttons>\r\n                    <button>Play</button>\r\n                    <button>My List</button>\r\n                </Buttons>\r\n                <h1 className=\"banner_desc\">{truncate(movie.overview, 150)}</h1>\r\n            </Contents>\r\n            <FadeBottom></FadeBottom>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n background-size: cover;\r\n position: relative;\r\n background-postion: \"center center\";\r\n height: 448px;\r\n color: white;\r\n \r\n`\r\n\r\nconst Contents = styled.div`\r\n margin-left: 30px;\r\n padding-top: 140px;\r\n height: 190px;\r\n .banner_title{\r\n     font-size:3rem;\r\n     font-weight: 800;\r\n     padding-bottom: 0.3rem;\r\n }\r\n\r\n .banner_desc{\r\n     width: 45rem;\r\n     line-height: 1.3;\r\n     padding-top: 1rem;\r\n     font-size: 0.8rem;\r\n     max-width: 360px;\r\n     height: 80px;\r\n }\r\n`\r\n\r\nconst Buttons = styled.div`\r\nbutton{\r\n color: #fff;\r\n outline: none;\r\n border: none;\r\n font-weight: 700;\r\n border-radius: 0.2vw;\r\n padding-left: 2rem;\r\n padding-right: 2rem;\r\n margin-right: 1rem;\r\n padding-top: 0.5rem;\r\n background-color: rgba(51, 51, 51, 0.5);\r\n padding-bottom: 0.5rem;\r\n cursor: pointer;\r\n}\r\ncursor: pointer;\r\nbutton:hover {\r\n    color: #000;\r\n    background-color: #e6e6e6;\r\n    transition: all 0.2s;\r\n    }\r\n`\r\n\r\nconst FadeBottom = styled.div`\r\n height: 7.4rem;\r\n background-image: linear-gradient(\r\n     180deg,\r\n     transparent,\r\n     rgba(37, 37, 37, 0.61),\r\n     #111\r\n );\r\n`\r\n\r\nexport default Banner\r\n","import axios from './axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nfunction Rows({title, fetchUrl, isLargeRow = false}) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\"\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    return (\r\n        <Container>\r\n            <h2>{title}</h2>\r\n            <div className=\"posters\">\r\n            {movies.map((movie) => (\r\n                (isLargeRow && movie.poster_path) || (!isLargeRow && movie.backdrop_path)) && (\r\n                    <img className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                    key={movie.id}\r\n                    src={`${base_url}${\r\n                    isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                    }`} alt={movie.name} />\r\n                    )\r\n            )}\r\n                    \r\n\r\n                \r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n color: white;\r\n margin-left: 20px;\r\n \r\n\r\n .posters{\r\n    display: flex;\r\n overflow-y: hidden;\r\n overflow-x: scroll;\r\n padding: 20px;\r\n }\r\n .posters {\r\n  ::-webkit-scrollbar {\r\n    width: 5px;\r\n    height: 3px;\r\n  }\r\n  ::-webkit-scrollbar-track {\r\n    background: #232b2b; \r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background: red; \r\n    width: 10px;\r\n  }\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: #555; \r\n  }\r\n\r\n  ::-webkit-scrollbar-track-piece:end {\r\n  margin-right: 800px; \r\n}\r\n }\r\n .row_poster{\r\n     max-height: 130px;\r\n     object-fit: contain;\r\n     margin-right: 10px;\r\n     width: 100%;\r\n     transition: transform 450ms;\r\n }\r\n\r\n .row_poster:hover{\r\n     transform: scale(1.08);\r\n     opacity: 1;\r\n }\r\n \r\n .row_posterLarge{\r\n     max-height: 280px;\r\n }\r\n\r\n .row_posterLarge:hover{\r\n    transform: scale(1.09);\r\n     opacity: 1; \r\n }\r\n`\r\n\r\nexport default Rows\r\n","import React from 'react';\r\nimport Navbar from './Navbar';\r\nimport styled from 'styled-components';\r\nimport Banner from './Banner';\r\nimport requests from './Request';\r\nimport Rows from './Rows';\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <Homescreen>\r\n            <Navbar />\r\n            <Banner /> \r\n            <Wrap>\r\n            <Rows \r\n                title = 'Netflix Originals'\r\n                fetchUrl = {requests.fetchNetflixOriginals}\r\n                isLargeRow\r\n            />\r\n            <Rows \r\n                title = 'Trending Now'\r\n                fetchUrl = {requests.fetchTrending}\r\n            />\r\n            <Rows \r\n                title = 'Top Rated'\r\n                fetchUrl = {requests.fetchTopRated}\r\n            />\r\n            <Rows \r\n                title = 'Action Movies'\r\n                fetchUrl = {requests.fetchActionMovies}\r\n            />\r\n            <Rows \r\n                title = 'Comedy Movies'\r\n                fetchUrl = {requests.fetchComedyMovies}\r\n            />\r\n            <Rows \r\n                title = 'Horror Movies'\r\n                fetchUrl = {requests.fetchHorrorMovies}\r\n            />\r\n            <Rows \r\n                title = 'Romance Movies'\r\n                fetchUrl = {requests.fetchRomanceMovies}\r\n            />\r\n            <Rows \r\n                title = 'Documentaries'\r\n                fetchUrl = {requests.fetchDocumentaries}\r\n            />\r\n\r\n            </Wrap>\r\n            \r\n        </Homescreen>\r\n\r\n        \r\n    )\r\n}\r\n\r\nconst Homescreen = styled.div`\r\nwidth: auto;\r\nheight: auto;\r\nbackground-color: #111;\r\noverflow:auto;\r\n`\r\n\r\nconst Wrap = styled.div`\r\n`\r\n\r\nexport default HomeScreen\r\n","import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBYmDv9u2x19r8M6MQrLjgfl6lAMFb90lM\",\r\n    authDomain: \"netflix-clone-1976c.firebaseapp.com\",\r\n    projectId: \"netflix-clone-1976c\",\r\n    storageBucket: \"netflix-clone-1976c.appspot.com\",\r\n    messagingSenderId: \"376507993945\",\r\n    appId: \"1:376507993945:web:35484dc61cffcc40040648\"\r\n  };\r\n\r\n  \r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const auth = firebase.auth();\r\n  const db = firebase.firestore();\r\n\r\n  export {auth};\r\n  export default db;","import React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport {auth} from './firebase';\r\n\r\n\r\nfunction SignInScreen() {\r\n\r\n    const emailRef = useRef(null);\r\n    const passRef = useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n        \r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passRef.current.value\r\n        ).then((authUser) => {\r\n            console.log(authUser);\r\n        }).catch(error => {\r\n            alert(error.message);\r\n        });\r\n    };\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passRef.current.value\r\n        ).then((authUser) => {\r\n            console.log(authUser);\r\n        }).catch(error => {\r\n            alert(error.message);\r\n        });  \r\n    }; \r\n\r\n    return (\r\n        <Container>\r\n        <form>\r\n            <h1>Sign In</h1>\r\n            <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\r\n            <input ref={passRef} placeholder=\"Password\" type=\"password\" />\r\n            <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n            <h4><span className=\"grey\">New to Netflix?</span> \r\n            <span className=\"link\" onClick={register}>Sign Up now.</span></h4>\r\n        </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n max-width: 300px;\r\n padding: 70px;\r\n \r\n background: rgba(0,0,0,0.6);\r\n\r\n form{\r\n     display: grid;\r\n     flex-direction: column;\r\n     width: 16vw;\r\n     margin-left: auto;\r\n     margin-right: auto;\r\n     h1{\r\n         text-align: left;\r\n         margin-bottom: 25px;\r\n     }\r\n     h4{\r\n        text-align: left;\r\n        margin-top: 30px;\r\n\r\n        .grey{\r\n            color: gray;\r\n        }\r\n        .link: hover{\r\n            cursor: pointer;\r\n            text-decoration: underline;\r\n        }\r\n     }\r\n     input{\r\n         outlin-width: 0;\r\n         height: 40px;\r\n         margin-bottom: 14px;\r\n         border-radius: 5px;\r\n         border: none;\r\n         padding: 5px 15px;\r\n     }\r\n     button{\r\n         padding: 16px 20px;\r\n         font-size: 1rem;\r\n         color: #fff;\r\n         border-radius: 5px;\r\n         font-weight: 600;\r\n         border: none;\r\n         cursor: pointer;\r\n         margin-top: 20px;\r\n\r\n     }\r\n }\r\n`\r\n\r\nexport default SignInScreen\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport SignInScreen from './SignInScreen';\r\nfunction LoginScreen() {\r\n\r\n    const [signIn, setSignIn]=useState(false);\r\n\r\n    return (\r\n        <Container>\r\n            <Background>\r\n                <img src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\r\n                <button onClick={()=> setSignIn(true)}>Sign In</button>\r\n                <Gradient></Gradient>\r\n            </Background>\r\n            <Body>\r\n            {signIn ? (<SignInScreen />):\r\n                <>\r\n                <h1>Unlimited films, TV programmes and more.</h1>\r\n                <h2>Watch anywhere, Cancel at any time.</h2>\r\n                <h3>Ready to watch? Enter your email to Create or restart your membership.</h3>\r\n                <Input>\r\n                    <form>\r\n                        \r\n                        <button onClick={()=> setSignIn(true)}> GET STARTED </button>\r\n                    </form>\r\n\r\n                    \r\n                </Input>\r\n              </>  \r\n            }\r\n            \r\n            </Body>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n position: relative;\r\n height: 100vh;\r\n \r\n background: url(\"https://miro.medium.com/max/1400/1*5lyavS59mazOFnb55Z6znQ.png\") center ;\r\n background-size: cover;\r\n background-repeat: no-repeat;\r\n overflow: hidden;\r\n`\r\n\r\nconst Background = styled.div`\r\n img{\r\nposition: fixed;\r\nleft: 0;\r\nwidth: 150px;\r\nobject-fit: contain;\r\npadding-left: 20px;\r\n }\r\n\r\n button{\r\n     position: fixed;\r\n     right: 20px;\r\n     top: 20px;\r\n     padding: 10px 20px;\r\n     font-size: 1rem;\r\n     color: #fff;\r\n     background-color: #e50914;\r\n     border: none;\r\n     cursor : pointer;\r\n     \r\n }\r\n\r\n \r\n`\r\n\r\nconst Gradient = styled.div`\r\n width: 100%;\r\n z-index: 1;\r\n height: 100vh;\r\n background: rgba(0,0,0,0.4);\r\n background-image: linear-gradient(\r\n     to top,\r\n     rgba(0,0,0,0.8) 0,\r\n     rgba(0,0,0,0) 60%,\r\n     rgba(0,0,0,0.8) 100%\r\n )\r\n`\r\n\r\nconst Body = styled.div`\r\n z-index: 1;\r\n color: #fff;\r\n padding: 20px;\r\n width: 100vw;\r\n position: absolute;\r\n top: 30%;\r\n display: flex;\r\n flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n text-align: center;\r\n \r\n h1{\r\n     \r\n     font-size: 3.125rem;\r\n     margin-bottom: 20px;\r\n }\r\n h2{\r\n     font-size: 2rem;\r\n     font-weight: 400;\r\n     margin-bottom: 30px;\r\n }\r\n h3{\r\n     font-size: 1.3rem;\r\n     font-weight: 400;\r\n }\r\n button{\r\n     padding: 16px 20px;\r\n     font-size: 1rem;\r\n     color: #fff;\r\n     border: none;\r\n     background-color: #e50914;\r\n     font-weight: 600;\r\n     cursor: pointer;\r\n     \r\n }\r\n button:hover{\r\n    \r\n     background-color: grey;\r\n     \r\n }\r\n`\r\nconst Input = styled.div`\r\nmargin:20px;\r\nform{\r\n    width: 100vw;\r\n    input{\r\n        padding: 10px;\r\n        outline-width: 0;\r\n        height: 30px;\r\n        width: 30%;\r\n        border: none;\r\n        max-width: 600px;\r\n    }\r\n    \r\n}\r\n \r\n`\r\n\r\nexport default LoginScreen\r\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState:{\n    user: null,\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n\n    logout: (state) => {\n      state.user = null;\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\n\nexport default userSlice.reducer;\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { selectUser } from './features/counter/userSlice';\r\nimport { auth } from './firebase';\r\nimport Navbar from './Navbar';\r\n\r\nfunction ProfileScreen() {\r\n\r\n    const user = useSelector(selectUser);\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar />\r\n            <Body>\r\n                <h1>Your Profile</h1> \r\n                <Info>\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"\" />\r\n                    <Details>\r\n                        <h2>{user.email}</h2>\r\n                        <button onClick={()=> auth.signOut()} >Sign Out</button>\r\n                    </Details>\r\n                    <Plans>\r\n                        \r\n                    </Plans>\r\n                </Info>\r\n            </Body>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n height: 100vh;\r\n color: white;\r\n background-color: black;\r\n`\r\n\r\nconst Body = styled.div`\r\n padding-top: 10%;\r\n display: flex;\r\n flex-direction: column;\r\n width: 50%;\r\n margin-left: auto;\r\n margin-right: auto;\r\n max-width: 800px;\r\n\r\n h1{\r\n     font-size: 60px;\r\n     font-weight: 400;\r\n     border-bottom: 1px solid #282c2d;\r\n     margin-bottom: 20px;\r\n }\r\n`\r\n\r\nconst Info = styled.div`\r\n display: flex;\r\n img{\r\n     height: 100px;\r\n }\r\n`\r\n\r\nconst Details = styled.div`\r\n color: white;\r\n margin-left: 25px;\r\n flex:1;\r\n\r\n h2{\r\n     background-color: grey;\r\n     padding: 15px;\r\n     font-size: 15px;\r\n     padding-left: 20px;\r\n }\r\n\r\n button{\r\n     padding: 10px 20px;\r\n     font-size: 1rem;\r\n     margin-top: 5%;\r\n     width: 100%;\r\n     color: #fff;\r\n     background-color: #e50914;\r\n     font-weight: 600;\r\n     border: none;\r\n     cursor : pointer;\r\n }\r\n \r\n`\r\nconst Plans = styled.div`\r\n\r\n`\r\n\r\nexport default ProfileScreen\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport HomeScreen from './HomeScreen';\nimport LoginScreen from './LoginScreen';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { auth } from './firebase';\nimport { useDispatch } from 'react-redux';\nimport { login,logout, selectUser } from './features/counter/userSlice';\nimport { useSelector } from 'react-redux';\nimport ProfileScreen from './ProfileScreen';\n\n\nfunction App() {\nconst user = useSelector(selectUser);\nconst dispatch = useDispatch();\n\nuseEffect(()=>{\n const unsubscribe = auth.onAuthStateChanged(userAuth => {\n   if(userAuth) {\n      dispatch(login({\n        uid: userAuth.uid,\n        email: userAuth.email,\n      }))\n   } else{\n      dispatch(logout());\n   }\n });\n\n return unsubscribe;\n}, [dispatch])\n  return (\n    <div className=\"App\">\n      <Router>\n      {!user? (<LoginScreen />) : (<Switch>\n          <Route path='/profile'>\n           <ProfileScreen />\n          </Route>\n          <Route exact path=\"/\">\n            <HomeScreen />\n          </Route>\n        </Switch>)}\n      \n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/counter/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}